= content_for :page_header do
  %h1= t('.title', :default => [:'helpers.titles.edit', 'Edit %{model}'], :model => Reimbursement.model_name.human)

%strong.label.labe.label-defaultl-defaul.label-defaultt= Reimbursement.human_attribute_name(:event)
%br
= render @reimbursement.event

%strong.label.label-default= Reimbursement.human_attribute_name(:request)
%br
= render @request

= simple_form_for(@reimbursement, :url => request_reimbursement_path(@request),html: { class: 'form-horizontal form-inputs' }, wrapper: :horizontal_form, :method => :put) do |f|
  %strong.label.label-default= t(:general_info)
  %br
  .col-md-6
    = f.input :description, :input_html => {:rows => 3}

    %strong.label.label-default= t(:transfer_bank_info)
    %br
    = f.simple_fields_for :bank_account do |b|
      .form-horizontal
        = b.input :holder
        = b.input :bank_name
        = b.input :format do
          = b.radio_button :format, "iban", :data => {:target => "#iban-tab"}, :class => "tab-trigger"
          = BankAccount.human_format_name("iban")
          = b.radio_button :format, "national", :data => {:target => "#national-tab"}, :class => "tab-trigger"
          = BankAccount.human_format_name("national")
        .tab-content
          #iban-tab{:class => b.object.iban? ? "tab-pane fade in active" : "tab-pane fade" }
          = b.input :iban
          = b.input :bic
          #national-tab{:class => b.object.national? ? "tab-pane fade in active" : "tab-pane fade" }
            = b.input :national_bank_code
            = b.input :national_account_code
            = b.input :country_code, :as => :country, :input_html => {:autocomplete => "off"}
            = b.input :bank_postal_address

  .form-inline.col-md-10
    %strong.label.label-default= TravelSponsorship.human_attribute_name(:links)
    - unless @reimbursement.errors[:links].empty?
      .alert.alert-inline.alert-danger= @reimbursement.links.map {|e| e.errors.full_messages}.uniq.join("; ")
    %table.table.table-condensed
      %thead
        %tr
          %th= ReimbursementLink.human_attribute_name(:title)
          %th= ReimbursementLink.human_attribute_name(:url)
          %th
      %tbody#links
        = f.simple_fields_for :links do |link|
          = render 'link_fields', :f => link
        %tr#links_links
          %td= link_to_add_association t(:add_link), f, :links, "data-association-insertion-node" => "#links_links"

  .form-inline.col-md-10
    %strong.label.label-default= TravelSponsorship.human_attribute_name(:attachments)
    - unless @reimbursement.errors[:attachments].empty?
      .alert.alert-inline.alert-error= @reimbursement.attachments.map {|e| e.errors.full_messages}.uniq.join("; ")
    %table.table.table-condensed
      %thead
        %tr
          %th= ReimbursementAttachment.human_attribute_name(:title)
          %th= ReimbursementAttachment.human_attribute_name(:file)
          %th
      %tbody#attachments
        = f.simple_fields_for :attachments do |attachment|
          = render 'attachment_fields', :f => attachment
        %tr#attachments_links
          %td= link_to_add_association t(:add_attachment), f, :attachments, "data-association-insertion-node" => "#attachments_links"

  .form-inline.col-md-10
    %strong.label.label-default= Reimbursement.human_attribute_name(:expenses)
    .alert.alert-inline.alert-info
      = t(:reimbursement_expenses_help)
      - if manual_authorized_amount_is_needed_for? @reimbursement
        = t(:reimbursement_manual_expenses_help)
    - if !@reimbursement.errors[:"request.expenses"].empty?
      .alert.alert-inline.alert-error= @reimbursement.expenses.map {|e| e.errors.full_messages}.uniq.join("; ")
    %table.table.table-condensed
      %thead#expenses_head
        %tr
          %th= Reimbursement.human_attribute_name(:subject)
          %th= Reimbursement.human_attribute_name(:description)
          %th= RequestExpense.human_attribute_name(:estimated_amount)
          %th= RequestExpense.human_attribute_name(:approved_amount)
          %th= RequestExpense.human_attribute_name(:total_amount)
          - if manual_authorized_amount_is_needed_for? @reimbursement
            %th= RequestExpense.human_attribute_name(:authorized_amount)

      %tbody#expenses
        = f.simple_fields_for :request do |request|
          = request.simple_fields_for :expenses do |e|
            - expense = e.object
            %tr
              %td.subject= expense.subject
              %td.description= expense.description
              %td.estimated= number_to_currency(expense.estimated_amount, :unit => expense.estimated_currency)
              %td.approved= number_to_currency(expense.approved_amount, :unit => expense.approved_currency)
              %td.total= number_to_currency(e.text_field(:total_amount, :class => 'input-mini'), :unit => expense.total_currency)
              - if manual_authorized_amount_is_needed_for? @reimbursement
                - if expense.authorized_can_be_calculated?
                  %td.authorized= number_to_currency("XX", :unit => expense.authorized_currency)
                - else
                  %td.authorized= number_to_currency(e.text_field(:authorized_amount, :class => 'input-mini'), :unit => expense.authorized_currency)

  .well.col-md-12
    = f.button :submit, :class => 'btn btn-primary'
    = link_to t('.cancel', :default => t("helpers.links.cancel")), request_reimbursement_path(@reimbursement.request), :class => 'btn btn-default'
