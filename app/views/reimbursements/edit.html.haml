= content_for :page_header, t('.title', :default => [:'helpers.titles.edit', 'Edit %{model}'], :model => Reimbursement.model_name.human)

%strong.label= Reimbursement.human_attribute_name(:event)
%br
= render resource.event

%strong.label= Reimbursement.human_attribute_name(:request)
%br
= render parent

= simple_form_for resource, :url => request_reimbursement_path(parent), :method => :put do |f|
  %strong.label= t(:general_info)
  %br
  .form-inputs.form-horizontal
    = f.input :description, :input_html => {:rows => 3}

  %strong.label= t(:transfer_bank_info)
  %br
  = f.simple_fields_for :bank_account do |b|
    .form-inputs.form-horizontal
      = b.input :holder
      = b.input :bank_name
      = b.input :format do
        = b.radio_button :format, "iban", :data => {:target => "#iban-tab"}, :class => "tab-trigger"
        = BankAccount.human_format_name("iban")
        = b.radio_button :format, "national", :data => {:target => "#national-tab"}, :class => "tab-trigger"
        = BankAccount.human_format_name("national")
      .tab-content
        #iban-tab{:class => b.object.iban? ? "tab-pane fade in active" : "tab-pane fade" }
          = b.input :iban
          = b.input :bic
        #national-tab{:class => b.object.national? ? "tab-pane fade in active" : "tab-pane fade" }
          = b.input :national_bank_code
          = b.input :national_account_code
          = b.input :country_code, :as => :country, :input_html => {:autocomplete => "off"}
          = b.input :bank_postal_address

  .form-inputs.form-inline
    %strong.label= Request.human_attribute_name(:links)
    - unless resource.errors[:links].empty?
      .alert.alert-inline.alert-error= resource.links.map {|e| e.errors.full_messages}.uniq.join("; ")
    %table.table.table-condensed
      %thead
        %tr
          %th= ReimbursementLink.human_attribute_name(:title)
          %th= ReimbursementLink.human_attribute_name(:url)
          %th
      %tbody#links
        = f.simple_fields_for :links do |link|
          = render 'link_fields', :f => link
        %tr#links_links
          %td= link_to_add_association t(:add_link), f, :links, "data-association-insertion-node" => "#links_links"

  .form-inputs.form-inline
    %strong.label= Request.human_attribute_name(:attachments)
    - unless resource.errors[:attachments].empty?
      .alert.alert-inline.alert-error= resource.attachments.map {|e| e.errors.full_messages}.uniq.join("; ")
    %table.table.table-condensed
      %thead
        %tr
          %th= ReimbursementAttachment.human_attribute_name(:title)
          %th= ReimbursementAttachment.human_attribute_name(:file)
          %th
      %tbody#attachments
        = f.simple_fields_for :attachments do |attachment|
          = render 'attachment_fields', :f => attachment
        %tr#attachments_links
          %td= link_to_add_association t(:add_attachment), f, :attachments, "data-association-insertion-node" => "#attachments_links"

  .form-inputs.form-inline
    %strong.label= Reimbursement.human_attribute_name(:expenses)
    - if !resource.errors[:"request.expenses"].empty?
      .alert.alert-inline.alert-error= resource.expenses.map {|e| e.errors.full_messages}.uniq.join("; ")
    %table.table.table-condensed
      %thead
        %tr
          %th= Reimbursement.human_attribute_name(:subject)
          %th= Reimbursement.human_attribute_name(:description)
          %th= RequestExpense.human_attribute_name(:estimated_amount)
          %th= RequestExpense.human_attribute_name(:approved_amount)
          %th= RequestExpense.human_attribute_name(:total_amount)
          %th= RequestExpense.human_attribute_name(:authorized_amount)
      %tbody#expenses
        = f.simple_fields_for :request do |request|
          = request.simple_fields_for :expenses do |e|
            - expense = e.object
            %tr
              %td= expense.subject
              %td= expense.description
              %td= number_to_currency(expense.estimated_amount, :unit => expense.estimated_currency)
              %td= number_to_currency(expense.approved_amount, :unit => expense.approved_currency)
              - if can? :submit, resource
                %td= number_to_currency(e.text_field(:total_amount, :class => 'input-mini'), :unit => expense.total_currency)
                %td= number_to_currency(expense.authorized_amount, :unit => expense.authorized_currency)
              - elsif can? :approve, resource
                %td= number_to_currency(expense.total_amount, :unit => expense.total_currency)
                %td= number_to_currency(e.text_field(:authorized_amount, :class => 'input-mini'), :unit => expense.authorized_currency)
              - else
                %td= number_to_currency(expense.total_amount, :unit => expense.total_currency)
                %td= number_to_currency(expense.authorized_amount, :unit => expense.authorized_currency)

  .form-actions
    = f.button :submit, :class => 'btn-primary'
    = link_to t('.cancel', :default => t("helpers.links.cancel")), reimbursements_path, :class => 'btn'
